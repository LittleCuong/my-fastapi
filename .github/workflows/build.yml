name: Push the Docker image to AWS ECR Repo
on:
  push:
    branches:
      - main

jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
      - name: Get timestamp
        id: get-timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Register new task definition
        id: register-task-def
        run: |
          TASK_DEFINITION_JSON=$(jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            '{
              family: "my-simple-fastapi",
              containerDefinitions: [
                {
                  name: "simple-fastapi-container",
                  image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG,
                  portMappings: [
                    {
                      name: "simple-fastapi-container-8000-tcp",
                      containerPort: 8000,
                      hostPort: 8000,
                      protocol: "tcp",
                      appProtocol: "http"
                    }
                  ],
                  essential: true,
                  logConfiguration: {
                    logDriver: "awslogs",
                    options: {
                      "awslogs-group": "/ecs/my-simple-fastapi",
                      "awslogs-region": "ap-southeast-2",
                      "awslogs-stream-prefix": "ecs",
                      "awslogs-create-group": "true",
                      "max-buffer-size": "25m",
                      mode: "non-blocking"
                    }
                  },
                  environment: [],
                  environmentFiles: [],
                  mountPoints: [],
                  volumesFrom: [],
                  ulimits: [],
                  systemControls: []
                }
              ],
              networkMode: "awsvpc",
              placementConstraints: [],
              requiresCompatibilities: [
                  "FARGATE"
              ],
              cpu: "1024",
              memory: "3072",
              runtimePlatform: {
                  cpuArchitecture: "X86_64",
                  operatingSystemFamily: "LINUX"
              },
              taskRoleArn: "arn:aws:iam::767397773214:role/ecsTaskExecutionRole",
              executionRoleArn: "arn:aws:iam::767397773214:role/ecsTaskExecutionRole"
            }' <<< '{}')
          echo "$TASK_DEFINITION_JSON" > updated-task-definition.json
          aws ecs register-task-definition \
            --cli-input-json file://updated-task-definition.json \
            --region ap-southeast-2

      - name: Update ECS service
        run: |
          CLUSTER_NAME=${{ secrets.ECS_CLUSTER }}
          SERVICE_NAME=${{ secrets.ECS_SERVICE }}
          TASK_DEFINITION="my-simple-fastapi"

          # Get the latest task definition revision
          NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION | jq -r .taskDefinition.taskDefinitionArn)

          # Update the ECS service
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF_ARN \
            --region ap-southeast-2
